{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"/home/vitormrts/\\xC1rea de Trabalho/Projects/move-it-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/vitormrts/\\xC1rea de Trabalho/Projects/move-it-app/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from \"../../challenges.json\";\nimport { LevelUpModal } from '../components/LevelUpModal/LevelUpModal';\nimport { isMobile } from 'react-device-detect';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var _rest$level, _rest$currentExperien, _rest$challengesCompl;\n\n  var children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  var _useState = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState((_rest$currentExperien = rest.currentExperience) !== null && _rest$currentExperien !== void 0 ? _rest$currentExperien : 0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState((_rest$challengesCompl = rest.challengesCompleted) !== null && _rest$challengesCompl !== void 0 ? _rest$challengesCompl : 0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var _useState5 = useState(false),\n      isLevelUpModalOpen = _useState5[0],\n      setIsLevelUpModalOpen = _useState5[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2); // o segundo parametro esta vazio (array de dependencias) pois eh executado toda vez que alguma informacao for alterada\n\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n  useEffect(function () {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n    setIsLevelUpModalOpen(true);\n  }\n\n  function closeLevelUpModal() {\n    setIsLevelUpModalOpen(false);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play(); // audio \n\n    if (!isMobile && Notification.permission === \"granted\") {\n      new Notification(\"You have a new challenge!\", {\n        body: \"Earn \".concat(challenge.amount, \" xp!\"),\n        icon: \"favicon.png\"\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      challengesCompleted: challengesCompleted,\n      currentExperience: currentExperience,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      experienceToNextLevel: experienceToNextLevel,\n      completeChallenge: completeChallenge,\n      closeLevelUpModal: closeLevelUpModal\n    },\n    children: [children, isLevelUpModalOpen && /*#__PURE__*/_jsxDEV(LevelUpModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 37\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"UqHVByiPLb7kVaLDO0z8bDhE3KM=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/vitormrts/Área de Trabalho/Projects/move-it-app/src/contexts/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","Cookies","challenges","LevelUpModal","isMobile","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","isLevelUpModalOpen","setIsLevelUpModalOpen","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","closeLevelUpModal","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","icon","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react'\nimport Cookies from 'js-cookie'\nimport challenges from \"../../challenges.json\"\nimport { LevelUpModal } from '../components/LevelUpModal/LevelUpModal'\nimport { isMobile } from 'react-device-detect';\n\n\ninterface Challenge {\n    type: \"body\" | \"eye\";\n    description: string;\n    amount: number;\n\n}\n\ninterface ChallengesContextData {\n    level: number;\n    challengesCompleted: number;\n    currentExperience: number;\n    levelUp: () => void;\n    startNewChallenge: () => void;\n    activeChallenge: Challenge;\n    resetChallenge: () => void;\n    experienceToNextLevel: number;\n    completeChallenge: () => void;\n    closeLevelUpModal: () => void;\n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode\n    level: number,\n    currentExperience: number,\n    challengesCompleted: number  \n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData)\n\n\nexport function ChallengesProvider({ \n    children, \n    ...rest // level, currentExperience, challengesCompleted sao armazenados no objeto ...rest\n    }: ChallengesProviderProps) {\n    const [level, setLevel] = useState(rest.level ?? 1)\n    const [currentExperience, setCurrentExperience] = useState(rest.currentExperience ?? 0)\n    const [challengesCompleted, setChallengesCompleted] = useState(rest.challengesCompleted ?? 0)\n\n    const [activeChallenge, setActiveChallenge] = useState(null)\n    const [isLevelUpModalOpen, setIsLevelUpModalOpen] = useState(false)\n\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\n\n    // o segundo parametro esta vazio (array de dependencias) pois eh executado toda vez que alguma informacao for alterada\n    useEffect(() => {\n        Notification.requestPermission()\n    }, [])\n\n    useEffect(() => {\n        Cookies.set('level', String(level))\n        Cookies.set('currentExperience', String(currentExperience))\n        Cookies.set('challengesCompleted', String(challengesCompleted))\n\n    }, [level, currentExperience, challengesCompleted])\n\n    function levelUp() {\n        setLevel(level + 1)\n        setIsLevelUpModalOpen(true)\n    }\n\n    function closeLevelUpModal() {\n        setIsLevelUpModalOpen(false)\n    }\n\n    function startNewChallenge() {\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex]\n\n        setActiveChallenge(challenge)\n\n        new Audio('/notification.mp3').play() // audio \n\n        if (!isMobile && Notification.permission === \"granted\") {\n            new Notification(\"You have a new challenge!\", {\n              body: `Earn ${challenge.amount} xp!`,\n              icon: \"favicon.png\",\n            });\n        }\n    }\n\n    function resetChallenge() {\n        setActiveChallenge(null)\n    }\n\n    function completeChallenge() {\n        if (!activeChallenge) {\n            return\n        }\n\n        const { amount } = activeChallenge\n\n        let finalExperience = currentExperience + amount\n\n        if (finalExperience >= experienceToNextLevel) {\n            finalExperience = finalExperience - experienceToNextLevel\n            levelUp()\n        }\n\n        setCurrentExperience(finalExperience)\n        setActiveChallenge(null)\n        setChallengesCompleted(challengesCompleted + 1)\n    }\n\n    return (\n        <ChallengesContext.Provider value={{\n            level,\n            challengesCompleted,\n            currentExperience,\n            levelUp,\n            startNewChallenge,\n            activeChallenge,\n            resetChallenge,\n            experienceToNextLevel,\n            completeChallenge,\n            closeLevelUpModal\n            }}>\n            {children}\n\n            { isLevelUpModalOpen && <LevelUpModal/>}\n        </ChallengesContext.Provider>\n     )\n}\n\n"]},"metadata":{},"sourceType":"module"}