{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/vitormrts/\\xC1rea de Trabalho/Projects/move-it-app/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from \"../../challenges.json\";\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currenteExperience = _useState2[0],\n      setCurrenteExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      challengesCompleted: challengesCompleted,\n      currenteExperience: currenteExperience,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"2ZUSmS3/5u5+4Ev+z75iL2XQMz8=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/vitormrts/Área de Trabalho/Projects/move-it-app/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currenteExperience","setCurrenteExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge","resetChallenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAA6CC,QAA7C,QAA6D,OAA7D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAuBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAGP,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAC5CJ,QAAQ,CAAC,CAAD,CADoC;AAAA,MAC/DK,KAD+D;AAAA,MACxDC,QADwD;;AAAA,mBAElBN,QAAQ,CAAC,CAAD,CAFU;AAAA,MAE/DO,kBAF+D;AAAA,MAE3CC,qBAF2C;;AAAA,mBAGhBR,QAAQ,CAAC,CAAD,CAHQ;AAAA,MAG/DS,mBAH+D;AAAA,MAG1CC,sBAH0C;;AAAA,mBAKxBV,QAAQ,CAAC,IAAD,CALgB;AAAA,MAK/DW,eAL+D;AAAA,MAK9CC,kBAL8C;;AAOtE,WAASC,OAAT,GAAmB;AACfP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASS,iBAAT,GAA6B;AACzB,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AAEAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAA0B;AACtBT,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAACP,MAAAA,KAAK,EAALA,KAAD;AAAQI,MAAAA,mBAAmB,EAAnBA,mBAAR;AAA6BF,MAAAA,kBAAkB,EAAlBA,kBAA7B;AAAiDM,MAAAA,OAAO,EAAPA,OAAjD;AAA0DC,MAAAA,iBAAiB,EAAjBA,iBAA1D;AAA6EH,MAAAA,eAAe,EAAfA,eAA7E;AAA8FU,MAAAA,cAAc,EAAdA;AAA9F,KAAnC;AAAA,cACKjB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA3BeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, UseState, ReactNode, useState } from 'react'\nimport challenges from \"../../challenges.json\"\n\n\ninterface Challenge {\n    type: \"body\" | \"eye\";\n    description: string;\n    amount: number;\n\n}\n\ninterface ChallengesContextData {\n    level: number;\n    challengesCompleted: number;\n    currenteExperience: number;\n    levelUp: () => void;\n    startNewChallenge: () => void;\n    activeChallenge: Challenge;\n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData)\n\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\n    const [level, setLevel] = useState(1)\n    const [currenteExperience, setCurrenteExperience] = useState(0)\n    const [challengesCompleted, setChallengesCompleted] = useState(0)\n\n    const [activeChallenge, setActiveChallenge] = useState(null)\n\n    function levelUp() {\n        setLevel(level + 1)\n    }\n\n    function startNewChallenge() {\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex]\n\n        setActiveChallenge(challenge)\n    }\n\n    function resetChallenge() {\n        setActiveChallenge(null)\n    }\n\n    return (\n        <ChallengesContext.Provider value={{level, challengesCompleted, currenteExperience, levelUp, startNewChallenge, activeChallenge, resetChallenge}}>\n            {children}\n        </ChallengesContext.Provider>\n     )\n}\n\n"]},"metadata":{},"sourceType":"module"}