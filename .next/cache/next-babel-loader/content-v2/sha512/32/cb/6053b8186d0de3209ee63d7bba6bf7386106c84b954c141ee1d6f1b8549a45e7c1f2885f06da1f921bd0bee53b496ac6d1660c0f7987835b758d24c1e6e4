{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vitormrts/\\xC1rea de Trabalho/Projects/move-it-app/src/contexts/ChallengesContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createContext, useEffect, useState } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from \"../../challenges.json\";\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  var _rest$level, _res$currentExperienc;\n\n  let {\n    children // level, currentExperience, challengesCompleted sao armazenados no objeto ...rest\n\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState((_res$currentExperienc = res.currentExperience) !== null && _res$currentExperienc !== void 0 ? _res$currentExperienc : 0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2); // o segundo parametro esta vazio (array de dependencias) pois eh executado toda vez que alguma informacao for alterada\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play(); // audio \n\n    if (Notification.permission === 'granted') {\n      // notificacao permitida\n      new Notification('Novo desafio', {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      challengesCompleted,\n      currentExperience,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/vitormrts/Área de Trabalho/Projects/move-it-app/src/contexts/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","Cookies","challenges","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","res","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react'\nimport Cookies from 'js-cookie'\nimport challenges from \"../../challenges.json\"\n\n\ninterface Challenge {\n    type: \"body\" | \"eye\";\n    description: string;\n    amount: number;\n\n}\n\ninterface ChallengesContextData {\n    level: number;\n    challengesCompleted: number;\n    currentExperience: number;\n    levelUp: () => void;\n    startNewChallenge: () => void;\n    activeChallenge: Challenge;\n    resetChallenge: () => void;\n    experienceToNextLevel: number;\n    completeChallenge: () => void\n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode\n    level: number,\n    currentExperience: number,\n    challengesCompleted: number  \n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData)\n\n\nexport function ChallengesProvider({ \n    children, \n    ...rest // level, currentExperience, challengesCompleted sao armazenados no objeto ...rest\n    }: ChallengesProviderProps) {\n    const [level, setLevel] = useState(rest.level ?? 1)\n    const [currentExperience, setCurrentExperience] = useState(res.currentExperience ?? 0)\n    const [challengesCompleted, setChallengesCompleted] = useState(0)\n\n    const [activeChallenge, setActiveChallenge] = useState(null)\n\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\n\n    // o segundo parametro esta vazio (array de dependencias) pois eh executado toda vez que alguma informacao for alterada\n    useEffect(() => {\n        Notification.requestPermission()\n    }, [])\n\n    useEffect(() => {\n        Cookies.set('level', String(level))\n        Cookies.set('currentExperience', String(currentExperience))\n        Cookies.set('challengesCompleted', String(challengesCompleted))\n\n    }, [level, currentExperience, challengesCompleted])\n\n    function levelUp() {\n        setLevel(level + 1)\n    }\n\n    function startNewChallenge() {\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex]\n\n        setActiveChallenge(challenge)\n\n        new Audio('/notification.mp3').play() // audio \n\n        if (Notification.permission === 'granted') { // notificacao permitida\n            new Notification('Novo desafio', {\n                body: `Valendo ${challenge.amount}xp!`\n            })\n        }\n    }\n\n    function resetChallenge() {\n        setActiveChallenge(null)\n    }\n\n    function completeChallenge() {\n        if (!activeChallenge) {\n            return\n        }\n\n        const { amount } = activeChallenge\n\n        let finalExperience = currentExperience + amount\n\n        if (finalExperience >= experienceToNextLevel) {\n            finalExperience = finalExperience - experienceToNextLevel\n            levelUp()\n        }\n\n        setCurrentExperience(finalExperience)\n        setActiveChallenge(null)\n        setChallengesCompleted(challengesCompleted + 1)\n    }\n\n    return (\n        <ChallengesContext.Provider value={{\n            level,\n            challengesCompleted,\n            currentExperience,\n            levelUp,\n            startNewChallenge,\n            activeChallenge,\n            resetChallenge,\n            experienceToNextLevel,\n            completeChallenge\n            }}>\n            {children}\n        </ChallengesContext.Provider>\n     )\n}\n\n"]},"metadata":{},"sourceType":"module"}