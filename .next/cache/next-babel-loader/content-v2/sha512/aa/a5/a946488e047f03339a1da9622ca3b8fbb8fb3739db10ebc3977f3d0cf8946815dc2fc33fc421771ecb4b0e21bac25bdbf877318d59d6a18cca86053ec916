{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vitormrts/\\xC1rea de Trabalho/Projects/move-it-app/src/contexts/ChallengesContext.tsx\";\nimport { createContext, useEffect, useState } from 'react';\nimport challenges from \"../../challenges.json\";\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2); // o segundo parametro esta vazio pois eh executado uma unica vez, quando o browser abre a page\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play(); // audio \n\n    if (Notification.permission === 'granted') {\n      // notificacao permitida\n      new Notification('Novo desafio', {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      challengesCompleted,\n      currentExperience,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/vitormrts/Área de Trabalho/Projects/move-it-app/src/contexts/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AA0BA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAGP,OAAO,SAASK,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AACtE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B,CAPsE,CAStE;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,OAAT,GAAmB;AACfZ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASc,iBAAT,GAA6B;AACzB,UAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;AAEA,QAAIC,KAAJ,CAAU,mBAAV,EAA+BC,IAA/B,GANyB,CAMa;;AAEtC,QAAIV,YAAY,CAACW,UAAb,KAA4B,SAAhC,EAA2C;AAAE;AACzC,UAAIX,YAAJ,CAAiB,cAAjB,EAAiC;AAC7BY,QAAAA,IAAI,EAAG,WAAUJ,SAAS,CAACK,MAAO;AADL,OAAjC;AAGH;AACJ;;AAED,WAASC,cAAT,GAA0B;AACtBlB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASmB,iBAAT,GAA6B;AACzB,QAAI,CAACpB,eAAL,EAAsB;AAClB;AACH;;AAED,UAAM;AAAEkB,MAAAA;AAAF,QAAalB,eAAnB;AAEA,QAAIqB,eAAe,GAAGzB,iBAAiB,GAAGsB,MAA1C;;AAEA,QAAIG,eAAe,IAAInB,qBAAvB,EAA8C;AAC1CmB,MAAAA,eAAe,GAAGA,eAAe,GAAGnB,qBAApC;AACAK,MAAAA,OAAO;AACV;;AAEDV,IAAAA,oBAAoB,CAACwB,eAAD,CAApB;AACApB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAC/BJ,MAAAA,KAD+B;AAE/BI,MAAAA,mBAF+B;AAG/BF,MAAAA,iBAH+B;AAI/BW,MAAAA,OAJ+B;AAK/BC,MAAAA,iBAL+B;AAM/BR,MAAAA,eAN+B;AAO/BmB,MAAAA,cAP+B;AAQ/BjB,MAAAA,qBAR+B;AAS/BkB,MAAAA;AAT+B,KAAnC;AAAA,cAWK3B;AAXL;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react'\nimport challenges from \"../../challenges.json\"\n\n\ninterface Challenge {\n    type: \"body\" | \"eye\";\n    description: string;\n    amount: number;\n\n}\n\ninterface ChallengesContextData {\n    level: number;\n    challengesCompleted: number;\n    currentExperience: number;\n    levelUp: () => void;\n    startNewChallenge: () => void;\n    activeChallenge: Challenge;\n    resetChallenge: () => void;\n    experienceToNextLevel: number;\n    completeChallenge: () => void\n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData)\n\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\n    const [level, setLevel] = useState(1)\n    const [currentExperience, setCurrentExperience] = useState(0)\n    const [challengesCompleted, setChallengesCompleted] = useState(0)\n\n    const [activeChallenge, setActiveChallenge] = useState(null)\n\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\n\n    // o segundo parametro esta vazio pois eh executado uma unica vez, quando o browser abre a page\n    useEffect(() => {\n        Notification.requestPermission()\n    }, [])\n\n    function levelUp() {\n        setLevel(level + 1)\n    }\n\n    function startNewChallenge() {\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex]\n\n        setActiveChallenge(challenge)\n\n        new Audio('/notification.mp3').play() // audio \n\n        if (Notification.permission === 'granted') { // notificacao permitida\n            new Notification('Novo desafio', {\n                body: `Valendo ${challenge.amount}xp!`\n            })\n        }\n    }\n\n    function resetChallenge() {\n        setActiveChallenge(null)\n    }\n\n    function completeChallenge() {\n        if (!activeChallenge) {\n            return\n        }\n\n        const { amount } = activeChallenge\n\n        let finalExperience = currentExperience + amount\n\n        if (finalExperience >= experienceToNextLevel) {\n            finalExperience = finalExperience - experienceToNextLevel\n            levelUp()\n        }\n\n        setCurrentExperience(finalExperience)\n        setActiveChallenge(null)\n        setChallengesCompleted(challengesCompleted + 1)\n    }\n\n    return (\n        <ChallengesContext.Provider value={{\n            level,\n            challengesCompleted,\n            currentExperience,\n            levelUp,\n            startNewChallenge,\n            activeChallenge,\n            resetChallenge,\n            experienceToNextLevel,\n            completeChallenge\n            }}>\n            {children}\n        </ChallengesContext.Provider>\n     )\n}\n\n"]},"metadata":{},"sourceType":"module"}